1、numpy属性
   import numpy as np   # 将numpy简写为np
   
2、矩阵运算
   矩阵可能一个一维数组，也可能是一个二维数组
   Eg. 将一个列表转化为矩阵
	  array = np.array([[1,2,3],[4,5,6]])
	  
	  print array   # 输出矩阵array,跟列表区别：元素之间没有逗号
      >> [[1 2 3]
         [4 5 6]]  
		 
3、numpy的属性
	  ndim：维度
	  shape：数组共有多少行数和列数
	  size：数组共有个数
	
	print array.ndim  # 输出array的维度(此处为2)，即几行
	print array.shape # 输出array的形状(2,3),即几行几列
	print array.size  # 输出array元素的个数。array共有2*3=6个元素
	
4、numpy创建
   4.1 创建array的格式
      import numpy as np
	  a = np.array([2,4,3],dtype=np.int64) # 定义a的格式为64位int型
	  b = np.array([2,4,3],dtype=np.float32) # 定义b的格式为32位float型
	  
      print a.dtype
	  >> int64
	 
	   注：一般情况下，位数越大存储的数字更加精确，但是同时也更占内存。
	   
   4.2 定义二维以上的矩阵      #里面的元素被两个括号包括([])
	   a = np.array([[2,5,6],
					[2,5,8]])
	
	4.3 定义一个元素全部为0的矩阵
	   b = np.zeros((3,4))   # 定义一个(3行，4列)元素全部为0的矩阵
	
       c = np.ones((4,5),dtype=np.int64) # 定义一个(4行，5列)元素全部为1的矩阵
   
	   e = np.empty((3,4))     # 创建全空数组, 其实每个值都是接近于零的数
	   
	   f = np.arange(10,20,2)  # 生成一个起始值为10，终止值为20，步长为2的数列
	     print f
	     >> [10,12,14,16,18]    # 注意没有20
	   f1 = np.arange(12).reshape((3,4))  # 生成是一个3行4列的矩阵
	   f2 = np.arange(4)        # 默认0为起始值，4为终止值，步长为1
	   
	   g = np.linspace(1,10,5) 
 	       #用linspace 创建线段型数据，开始端1，结束端10，且分割成5个数据，生成一维线段，
	   g1 = np.linspace(1,10,6).reshape((2,3)) 
	       # 同样生成一个2行三列的线段数据
	       # 注意：上面的参数6 = 2*3的关系一定要对准
	    
 5、numpy的基础运算1
	5.1 numpy (加法、减法)
	   import numpy as np
	   a = np.array([10,20,30,40])
	   b = np.arange(4)
	   
	   print a + b
	   print a - b
	   print a*b
	   
	   print a/b    # 除法取整，如果要保留小数位，加上from __future__ import division
	   
	5.2 python的平方表示
	    c = b**2     # 用**
	
	5.3 numpy中三角函数运算，需要调用numpy函数
        c = 10*np.sin(a)   # 即c=10sin(a)
		d = 9 *np.cos(a)
		e = 20*np.tan(a)
	5.4 判断numpy中的值
	    print b<3  
		>>[True,True,True,False]
    5.5 运算二维矩阵相乘
		import numpy as np
		a = np.array([[1,1]
					  [0,1]])
	    b = np.arange(4).reshape((2,2))
		
		c = a*b               # 对应元素相乘
		 
		d_dot1 = np.dot(a,b)  # 矩阵的乘法，各元素相乘再相加
		d_dot2 = a.dot(b)     # d_dot1和d_dot2相同
		
	5.6 创建一个随机生成的array
		import numpy as np
		a = np.random.random((2,4))  # 生成一个2行4列的随机矩阵，元素是随机的
		
		print np.sum(a)   #所有元素相加一起求和
		print np.min(a)   # 求a中最大值
		print np.max(a)   # 求a中最小值
		
		print np.sum(a,axis=1) # axis=1表示对每一行求和（即矩阵的每一个元素）
		print np.min(a,axis=0) # axis=0表示对每一列求最小值
	
 6、numpy的基础运算2
	6.1 最小值索引
	   import numpy as np
	   A = np.arange(2,14).reshape((3,4))
	   
	   print np.argmin(A)  # 矩阵所有元素最小值索引
	   print np.argmax(A)  # 矩阵所有元素最大值索引
	   
	6.2 求矩阵A的平均值
	   print np.mean(A)    # 求出矩阵所有元素的平均值
	   print A.mean()
	6.3 求矩阵A的中位数
	   print np.median(A)
	6.4  求矩阵中逐个的累加两个元素
	   print np.cumsum(A)
	    >>[ 2  5  9 14 20 27 35 44 54 65 77 90]  # 第一个元素不变
	6.5 求矩阵中逐个元素累差
	    print np.diff(A)
		 >>  [[1 1 1]
			 [1 1 1]
			 [1 1 1]]
	6.6 找出非零的数
		print np.nonzero(A)
		  >> (array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]), array([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]))
		 # 第一个array和第二个array分别是非零元素的横坐标和纵坐标
		 
	6.7 排序
		 A = np.arange(14,2,-1).reshape(3,4)
		 
		 print np.sort(A)  #对每一行的进行从小到大排序
			>> 
	6.8 矩阵的转置
		print A.T
	   eg. print (A.T).dot(A)
	6.9 clip功能，切片
	    print np.clip(A,5,9)  # 保留[5,9]之间的数，小于5则让其等于5
		                        大于9则让其等于9
		
	6.10 对于行或列求平均
	     print np.mean(A,axis=0) #对于列进行求平均值
		 print np.mean(A,axis=1) # 对于行进行求平均值

7  numpy索引
	7.1 用索引求值(一维)
	    A = np.array(3,15)
		print A[3]  # 查看第3个元素
	     >>6
	7.2 用索引求值(二维)
		A = np.arange(3,15).reshape(3,4)
		print A[2]   # 查看第2个元素
		 >> [11,12,13,14]
	7.3 查看具体某一个元素
	    print A[2][1] # 查看第2行第1列的元素
		print A[2,1]  # 查看第2行第1列的元素
	7.4 用：代表某一行/列所有数
	    print A[2,:]  # 第2行的所有数
		print A[:,1]  # 第1列的所有数
	  
	    print A[1,1:3] # 打印第一行，第1,2列的数
	
	    用处：For循环
		  Eg1：for row in A:         # 默认迭代A每一行
				 print row
***	      Eg2：for column in A.T:    # 迭代A每一列
		          print column
	7.8 迭代输出：对array的每一个具体的元素进行迭代 （特别重要）
		  print A.flatten()           # 将A变成一个大的列表 
		       # array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
		  
		  Eg3: for item in A.flat:    # A.flat是一个迭代器  
			       print item         # item就是具体的每一个元素
			          #3
					  #4
					  .
					  .
					  .
					  #14

8 array合并
	8.1 合并
		import numpy as np
		A = np.array([1,1,1])
		B = np.array([2,2,2])
	8.2 按列合并
		C = np.vstack((A,B))   # 上下合并(vertical stack)
		print C
		 >>[[1 1 1]
		    [2 2 2]]
	8.3 按行合并		 
		D = np.hstack((A,B))   # 左右合并(horizontal stack)
		print D.shape
		 >>[1 1 1 2 2 2]
		
	8.4 将行变成列元素
		# 如何把一个横向的数列，变成一个纵向的数列
		print A[:,np.newaxis]
		
		Eg: 将以上元素进行对应元素合并 
		  A1 = np.array([1,1,1])[:,np.newaxis]  #将行元素，变成列元素
		  B1 = np.array([2,2,2])[:,np.newaxis]  #
		  
		  print np.hstack((A1,A1,B1))  # 
		    >>[[1 1 2]
			   [1 1 2]
			   [1 1 2]]

	8.5 将array合并	  
		  C1 = np.concatenate((A1,A2,B1,A1),axis=0) #               可以用axis进行定义在那个方向合并 
		  print C
			>>[[1]
			   [1]
			   [1]
			   [1]
			   [1]
			   [1]
			   [2]
			   [2]
			   [2]
			   [1]
			   [1]
			   [1]]
		
	      C2 = np.concatenate((A1,A2,B1,A1),axis=1) # 在纵轴上合并
		  print C1
		    >> [[1 1 2 1]
				[1 1 2 1]
   			    [1 1 2 1]]

9、numpy 分割
    9.1 如何进行等量分割
		A = np.array(12).reshape(3,4)
		print np.split(A,2,axis=1)     # 进行相等分割               #split(ary,indices_or_sections,axis=0)
		  # 第一表示数组，第二个参数表示分割成多少片段，第三个参数表示方向
	
    9.2 如何进行不等量分割
		 print np.array_split(A,3,axis=1)  # 横向;要用到array_split函数
		 
	9.3 用vsplit和hsplit分割函数进行分割
	    print np.vsplit(A,3)   # 纵向分割
		print np.hsplit(A,3)   # 横向分割
		 
10、numpy copy && numpy (numpy 赋值)			  
	10.1 关联赋值(直接赋值会关联变量)
		import numpy as np
		a = np.arange(4)
		
		b = a
		c = a
		d = b
		
		a[0] = 11  # 给a[0]的第一个元素赋值
         改变a的时，b、c、d也会同时发生改变。
		 
	10.2 不关联赋值(使用copy功能)
	     a = np.array([0,1,2,3])
		 b = a.copy()   # deep copy功能
		 
		 a[3] = 44      #给a的第三个元素赋值 a = array([0,1,2,3])
		 
		 print b        #此时b还是a之前的元素
		   >>[0,1,2,3]
		 
		 
		