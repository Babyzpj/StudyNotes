视频链接：https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/

numpy和pandas区别
1、numpy序列化数据
2、pandas相当于字典形式的numpy 

1、创建 Series or DataFrame及pandas的基本操作
	import pandas as pd
	import numpy as np
	
	1.1 创建Series
		s = pd.Series([1,3,6,np.nan,44,1])
		
		dates = pd.date_range('20160101',periods=6)  # 生成六个日期
			 >>   DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',
				   '2016-01-05', '2016-01-06'],dtype='datetime64[ns]', freq='D')
	1.2 创建DataFrame
		# 定义1：创建DataFrame
		df = pd.DataFrame(np.random.randn(6,4),index=dates,columns=['a','b','c','d'])
		  #DataFrame注意要大写的字母。用dates做行索引，用a,b,c,d做列索引
			index表行索引 columns表列索引
		
		# 定义2：用字典形式导入
		 df = pd.DataFrame({'A':1,
					'B':pd.Timestamp('20131002'),
					'C':pd.Series(1,index=list(4)),dtype='float32'),
					'D':np.array([3]*4,dtype='int32')}	
		
	1.3 pandas常见的基本操作
		df.dtypes ：查看每一列的数据类型
		
		df.index  			 # 查看每一行的行名
		df.columns  		 #打印每一列的列名
		
		df.values :查看表的值
		
		df.describe()		 # 查看表中数字型的数字，忽略字符串
		
		df.T   				 #把DataFrame当做矩阵，进行转置
		
		df.sort_index(axis=1,ascending=False)  # 对列名进行倒排序
		
		df.sort_values(by='列名')              # 对某一列值进行排序
		 

2、 选择数据
    dates = pd.date_range('20130101', periods=6)
	df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates, columns=['A','B','C','D'])
	
	2.1 选择某一列 (查看某一列)
	    df['A']  或 df.A   #A代表列名
	
	2.2 从0到第3行 (查看前n行  df[0:n])
	    df[0:3]
		
	2.3 df.loc['A']   # 另一种查看某一行的方法，A表示行名称
	
	2.4  df[:,['A','B']]     # 打1:3]
	
3、
		dates = pd.date_range('20130101', periods=6)
		df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates, columns=['A','B','C','D'])
		df.iloc[0,1] = np.nan
		df.iloc[1,2] = np.nan
		"""
					 A     B     C   D
		2013-01-01   0   NaN   2.0   3
		2013-01-02   4   5.0   NaN   7
		2013-01-03   8   9.0  10.0  11
		2013-01-04  12  13.0  14.0  15
		2013-01-05  16  17.0  18.0  19
		2013-01-06  20  21.0  22.0  23
		"""
	3.1 pd.dropna()
		如果想直接去掉有 NaN 的行或列, 可以使用 dropna
		
		df.dropna(
				axis=0,     # 0: 对行进行操作; 1: 对列进行操作
				how='any'   # 'any': 只要存在 NaN 就 drop 掉; 'all': 必须全部是 NaN 才 drop 
				) 
		"""
					 A     B     C   D
		2013-01-03   8   9.0  10.0  11
		2013-01-04  12  13.0  14.0  15
		2013-01-05  16  17.0  18.0  19
		2013-01-06  20  21.0  22.0  23

8 DataFrame数据可视化
	import pandas as pd
	import numpy as np
	import matplotlib as plt
	# plot data
	
	8.1 创建一个线性数据 Series
		# Series
		data = pd.Series(np.random.randn(1000),index=np.arange(1000))
		data = data.cumsum() # 累加
		data.plot()
		#plt.plot(数据)
		plt.show()
	
	8.2 将Dataframe(类似矩阵形式)可视化
		#scatter(x=**,y=**)方法
		data = pd.DataFrame(
			np.random.randn(1000,4),
			index=np.arange(1000),
			columns=list("ABCD")
			)
		data = data.cumsum()
		ax = data.plot.scatter(x='A',y='B',color='red',label='Calss1')
		# 将之下这个 data 画在上一个 ax 上面
		data.plot.scatter(x='A',y='C',color='LightGreen',label='Class2',ax=ax)
		plt.show()
	
	
	参数： 
		1、plot参数： matplotlib.pyplot.plot(*args, **kwargs)
				plot(x, y)        # 绘制x和y使用默认线条样式和颜色
				plot(x, y, 'bo')  # 绘制使用蓝色圆圈标记的x和y
				plot(y)           # plot y使用x作为索引数组0..N-1
				plot(y, 'r+')     # 同上，但用红色的
			np.random.rand(raw,column) 两个参数行、列
			eg: np.random.rand(3,2)   #随机产生三行两列的数据
		2、matplotlib.pyplot.scatter(x,y,c='r',s= 100,linewidths=lValue,marker='o')
			 c='**'         ：设置颜色 red、blue、green、black、yellow、cyan。。。
							:可用简写  'r','y','g','b','r','y','g','b','r'
			 s='**'         : 
			 linewidths='**': 设置线宽
			 marker='**'    ：
			 
		3、
		

%%%%%%%%%%%%%%%%%%%下面是在实际使用时，自己不会去查找的知识点及链接%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% 温故而知新，可以为师矣%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

9、pd.read_csv()的各个参数  <http://www.cnblogs.com/datablog/p/6127000.html>
   
   1.1 names : array-like, default None
	  用于结果的列名列表，如果数据文件中没有列标题行，就需要执行header=None。默认列表中不能
	  出现重复，除非设定参数mangle_dupe_cols=True。
   
   1.2 dtype : Type name or dict of column -> type, default None
      每列数据的数据类型。例如 {'a': np.float64, 'b': np.int32}
   
   1.3 nrows : int, default None
	   需要读取的行数（从文件头开始算起）
	   
   1.4 iterator : boolean, default False
	   返回一个TextFileReader 对象，以便逐块处理文件。
 
   1.5 chunksize : int, default None
       文件块的大小， See IO Tools docs for more informationon iterator and chunksize.
   
  
10、python去两个字典的并集
    令a，b为两个字典，则计算并集的最快方法为：
	dict(a, **b) 
	
11、将数据打乱 <http://blog.csdn.net/qq_22238533/article/details/70917102>
    最简单的方法就是采用pandas中自带的 sample这个方法。
    假设df是这个DataFrame
    df.sample(frac=1)   
	 
12、pandas的groupby.apply函数的应用
	Eg: df为DataFrame类型
        	 device_id  key1  key2 key3
		   1    a        i     0    1
		   2    b        j     1    1
		   3    a        j     0    0
		   4    c        k     1    1
		   5    c        i     0    0  
		   6    a        i     0    1

    case1:根据表df2的列表头'device_id'，将相同device_id的后面各列对应的元素合并到一个列表中
	      df1=df.groupby('device_id',as_index=0).agg(lambda arr:([x for x in arr]))
		  df1
		     device_id   key1  key2    key3
	       1  a        [i,j,i] [0,0,0] [1,0,1]
           2  b          [j]   [1]     [1]
     	   3  c         [i,k]  [0,0]   [0,0]
		   
    case2: 表df中，根据device_id，对其后面对应元素合并，并去重
	      df2=df.groupby('device_id',as_index=0).agg(lambda arr:list(set([x for x in arr])))
		  print df2
			     device_id  key1  key2 key3
	       1       a        [i,j]  [0]  [1,0]
           2       b        [j]    [1]  [1]
     	   3       c        [i,k]  [0]  [0]
	
	case3: 加入df3如下图所示 
			   id	sex
			0	a	[1, 1, 0, 1]
			1	b	[0, 1, 0]
			2	c	[1, 1, 0, 0, 0]
			3	d	[0, 1, 0, 0]
		若要将sex对应的元素为0或1，取每个元素中元素最多的数。eg:a对应的sex有3个1,大于0的个数
        故取1.而c中1的个数为2个，少于0的个数3个，取0.
		若元素个数相等，取0
		
		from collections import Counter
		df3["sex"]=df3["sex"].apply(lambda arr:Counter(arr).most_common(1)[0][0])	
        print df3
			   id	sex
			0	a	1
			1	b	0
			2	c	0
			3	d	0		
			
	
13、pandas的apply函数
    1、pandas的apply函数 
       apply是pandas库的一个很重要的函数，多和 groupby 函数一起用，也可以直接用于 DataFrame 和Series对象。
	   主要用于数据聚合运算，可以很方便的对分组进行现有的运算 和自定义的运算。
	   
	2、groupby与apply函数的使用原理图(拆分-应用-合并三部曲)：
	   http://blog.csdn.net/u011523796/article/details/74360772
	
	